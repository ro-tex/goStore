image: golang:1.12

variables:
  REPO_NAME: gitlab.com/ro-tex/goStore
  LAMBDA_NAME: goStore
  # AWS_DEFAULT_REGION, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY will be taken from the environment

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  # needed by CI:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME
  # custom:
  - go version
  - python --version
  - export GO111MODULE=on
  - go get
  - apt-get update > /dev/null
  - apt-get -y install zip python-pip > /dev/null
  - pip install awscli > /dev/null
  - export COMMIT_TIME=$(git show -s --format=%aI $CI_COMMIT_SHA)

# These are the default stages and we don't need to specify them but mind the order.
#stages:
#  - build
#  - test
#  - deploy

build & deploy:
  stage: build
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - go test -race $(go list ./... | grep -v /vendor/)
    - 'GOOS=linux go build -ldflags="-s -w" -o main'
    - zip package.zip main
    - aws lambda update-function-code --function-name $LAMBDA_NAME --zip-file fileb://$PWD/package.zip --publish --no-dry-run
    - aws lambda update-function-configuration --function-name $LAMBDA_NAME --environment "{\"Variables\":{\"VERSION\":\"$COMMIT_TIME\",\"SHA\":\"$CI_COMMIT_SHA\"}}"
